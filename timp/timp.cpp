// timp.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <iomanip>
//#include <windows.h>

using namespace std;

//Функция проверки, можно ли пойти в этот город
bool check(int key, int* mas, int kol) {
    for (int j = 0; j < kol; j++)
        if (mas[j] == key)   //Если в этом городе мы уже были
            return false;
    return true;
}

int main() {
    //SetConsoleCP(1251);
    //SetConsoleOutputCP(1251);

    int kol;
    do  //Ввод кол-ва городов
    {
        cout << "Введите количество городов(2-10) --> ";
        cin >> kol;
    } while (kol < 2 || kol > 10);
    //Создание матрицы смежности
    int** arr = new int* [kol];
    for (int i = 0; i < kol; i++)
        arr[i] = new int[kol];

    int rasst;
    for (int i = 0; i < kol; i++) {
        for (int j = i; j < kol; j++) {
            if (i == j)  //Если одинаковые точки - заполняем нулями, чтобы получилась главная диагональ нулей
            {
                arr[i][j] = 0;
                continue;
            }
            do  //Ввод расстояния между городами для заполнения матрицы смежности
            {
                cout << "Введите расстояние от города " << i << " до города " << j << " --> ";
                cin >> rasst;
            } while (rasst < 1);
            arr[i][j] = arr[j][i] = rasst;
        }
    }
    //Вывод матрицы смежности
    cout << endl << "Матрица смежности: ";
    for (int i = 0; i < kol; i++) {
        cout << endl;
        for (int j = 0; j < kol; j++)
            cout << setw(5) << arr[i][j];
    }

    int* route = new int[kol];   // Маршрут (массив городов, в которых мы побывали в порядке посещения)

    cout << endl;
    char ans;
    int start;
    do {
        for (int i = 0; i < kol; i++)    //Заполняем массив -1
            route[i] = -1;
        do  //Ввод стартового города
        {
            cout << "Введите стартовый город --> ";
            cin >> start;
        } while (start < 0 || start > kol - 1);

        route[0] = start;
        int now = start;
        int path = 0;                       // длина уже пройденного пути
        cout << "\nМаршрут:" << endl;
        for (int i = 1; i < kol; i++) {     // i - индекс по маршруту и количество переходов, не считая возврата в стартовый город
            int min = INT_MAX, min_town;
            for (int j = 0; j < kol; j++) {
                if (check(j, route, kol) && arr[now][j] < min && arr[now][j] > 0) {  //Нахождение минимума
                    min = arr[now][j];      // запомнили текущий минимум
                    min_town = j;           // запомнили номер города для текущего минимума
                }
            }
            // а здесь min - действительный минимум и min_town - номер города с минимальным расстоянием от текущего
            path += min;            // добавляем к общему пути
            route[i] = min_town;    // добавляем город в маршрут
            cout << setw(2) << now << " -> " << setw(2) << route[i] << "   (расстояние " << min << ", путь " << path << ")" << endl;
            now = route[i];
        }
        // обрабатываем возврат в стартовый город
        path += arr[start][now];
        cout << setw(2) << now << " -> " << setw(2) << start << "   (расстояние " << arr[start][now] << ", путь " << path << ")" << endl;
        cout << "Общая длина пройденного пути: " << path << endl;

        cout << endl << "Желаете продолжить поиск путей?(+, если да) --> ";
        cin >> ans;

    } while (ans == '+');

    delete[] route; //Удаление массива пройденных городов

    //Удаление матрицы смежности
    for (int i = 0; i < kol; i++)
        delete[] arr[i];
    delete[] arr;

    //system("pause");
    return 0;
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
